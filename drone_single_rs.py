# initialize all matrices
#p_mat, d_mat, pd_mat, p_rs, d_rs = [], [], [], [], []

#print('pd_mat-> ', pd_mat)
import time
start_time = time.time()

p_rs = [1.934865162,
0.849623261,
0.518411678,
2.091958363,
1.144487156,
2.828032058,
2.198932072,
0.746301086,
1.76771002,
2.868947292,
3.343446397,
3.779895199,
1.808278294,
3.250137425,
1.555592344
]

d_rs = [1.986575536,
1.352154017,
1.511040589,
1.815668708,
2.070637729,
1.461949558,
2.018864767,
2.719176748,
0.86797314,
1.372599507,
4.256522785,
2.25282715,
3.953863553,
5.304830766,
8.138686991
]
#p_mat = [[0,2.83,2.24,4.12,7.07], [2.83,0,5,2.24,4.24], [2.24,5,0,5.83,9.22],[4.12,2.24,5.83,0,4.12]]
#d_mat = [[0,4.12,5.66,8.49,3.61], [4.12,0,3,5.39,2.83], [5.66,3,0,2.83,2.24],[8.49,5.39,2.83,0,5],[3.61,2.83,2.24,5,0]]
pd_mat = [[3.915245024844075, 1.6945767937107967, 2.4999430813378045, 2.4123238601947508, 1.9937287325854747, 2.7112941127615042, 0.6826229653078708, 2.3404173388513456, 1.1744748299237089, 2.201277180977868, 2.4107967179356806, 2.947488975956888, 3.25725269515137, 4.174809247561902, 9.978318023062029],
[2.74348622416202, 0.792665336661896, 1.407379853561167, 2.2029061056300154, 1.445220199744437, 1.549417556410491, 1.5460588471075283, 2.7504795208388586, 0.060597667877125894, 1.8156903345200746, 3.6324136402496494, 2.0212512869051626, 3.2401158227439684, 4.513087353978153, 8.752717855377934],
[2.485691030009165, 1.0747310833915298, 1.5191785410456038, 1.8981070634629802, 1.76976173276018, 1.5841534784075484, 1.5962875957122848, 2.5757002254486636, 0.3712532271527722, 1.489733010799644, 3.789389450092379, 2.204081864010013, 3.5982805211720046, 4.884148320774043, 8.58631330136207],
[0.8795967244595209, 3.240005786705942, 2.9006343348068078, 2.564838389723947, 3.895229600994773, 2.618832447313728, 3.8866016342249825, 3.817120014837836, 2.958753900018907, 2.2979065422483758, 6.141117594284233, 3.5417910091152085, 5.76753448523378, 7.232106362838403, 6.626378114747902],
[2.7414547261687474, 0.23597928554899225, 0.9397672448605553, 2.735115531505855, 0.9392535600453606, 1.1639014316173126, 2.0182532957095, 3.3101500556965617, 0.6139582457218575, 2.329602009188469, 3.947598440031198, 1.4765690648323102, 2.8097750076132693, 4.176456710303868, 8.528720921104634],
[2.574294259985811, 4.178364106992167, 4.1374168090964805, 1.9985465117193817, 4.895344223327879, 3.9342018413335134, 3.875501218986654, 3.0722372686386263, 3.584179237528962, 2.053823675026598, 5.917283703671506, 4.864001713190087, 6.781876960658375, 8.104352387981063, 7.912484545667066],
[2.1133103515597713, 1.7853896728740084, 0.9558104571284136, 3.9884327836131765, 1.927526380803737, 0.7792600335830918, 3.867104081293741, 4.901819842718134, 2.382516964470245, 3.5437927569259196, 5.830706671922618, 0.9279003179656988, 3.3592178924788865, 4.920184405913803, 6.8238820582933135],
[2.1913585836346092, 0.6894016424361801, 0.80977925725109, 2.5223489163314774, 1.3814191219584753, 0.8688667473230665, 2.2420529876208604, 3.2912915255131496, 0.7646325981674754, 2.0874881858396614, 4.331350505454327, 1.5282336532168839, 3.278271044480874, 4.692902192930561, 8.070925801865567],
[3.646727490560176, 2.2795443620650713, 2.9259004022012944, 1.4009874814321437, 2.8051145257389303, 3.0274989421404013, 0.5317053146084788, 1.3041402298397522, 1.4678673176184671, 1.316531904410937, 2.681960755320266, 3.5429306094191473, 4.303547832850731, 5.268663912089653, 9.86358135999958],
[4.308125245656695, 3.753971816409417, 4.283054266007679, 1.26376050337904, 4.337127068025714, 4.307706869757047, 1.946093207067642, 0.2832124032205867, 2.9127111353469015, 1.6353854486334005, 3.2331859975572175, 4.966810457849425, 5.857956221180024, 6.751992001724248, 10.439771914336756],
[2.7179962043065027, 4.677886441315237, 4.549656283715704, 2.648224954907152, 5.387654676704139, 4.315289443554684, 4.5148635399687, 3.7076502459780523, 4.14061180425555, 2.6886449589118353, 6.567137288304683, 5.252395181188225, 7.283372502789515, 8.6460055981034, 7.551038154146066],
[5.433536949615157, 2.6049466659696274, 3.2265306045697324, 4.8315579237992505, 2.0884449416122037, 3.56216473687883, 3.084225208710129, 4.74324916852123, 2.9405514956094745, 4.5582325326602415, 3.2857732156118384, 3.0706976870195386, 1.3684792003729855, 1.728126168567987, 10.766975493855092],
[0.7904775174857841, 2.2801835030841806, 1.6283696441954258, 3.283001132404293, 2.7615574244020977, 1.293027437383266, 3.8121841649921833, 4.4023798008682355, 2.4428528012246806, 2.8695281203763066, 6.009798367365475, 2.095748133591108, 4.490802354061925, 6.028031607463531, 6.364461493590983],
[1.8097163980978246, 4.417857369246142, 4.043840276925249, 3.3447567417083115, 5.066741829270095, 3.7455214149589144, 4.925753316425012, 4.567032321476348, 4.1179466032144925, 3.192810796923417, 7.144212788981798, 4.645993722734471, 6.928599091448033, 8.405063342547276, 6.181050896415283],
[1.5970188000162855, 1.5238920051422233, 0.7819569368365096, 3.311492281880495, 1.9216001481109157, 0.4458967845889077, 3.377245050688295, 4.274658224491757, 1.9065075338639415, 2.868538734447902, 5.463445181241698, 1.259689417804913, 3.6298638794398634, 5.166588195687026, 6.984013145662277]

]

# p_rs = [0.37,0.55,1.58]
# d_rs = [0.5,0.8,1.53]
# p_mat = [[0, 0.69, 1.7], [0.69, 0, 2.11], [1.7, 2.11, 0]]
# d_mat = [[0, 0.45, 1.84], [0.45, 0, 2.27], [1.84,2.27, 0]]
# pd_mat = [[0.16,0.6,1.68], [0.67,0.6,2.05], [1.86,2.29,0.15]]

pp_rs = p_rs[:]
# logic starts from here
path = []
route = []
starting_point_elements = []
final_distance = 0
distance = []
while len(route) < len(p_rs):
    sub_path = []
    for i in route:
        p_rs[i] = 10**10
    # identify starting point
    starting_point_elements = []
    for i in range(len(p_rs)):
        starting_point_elements.append(p_rs[i] + pd_mat[i][i] + d_rs[i])
    min_index = starting_point_elements.index(min(starting_point_elements))
    distance_travelled = starting_point_elements[min_index]
    if distance_travelled <= 20:
        sub_path.append(min_index)
        route.append(min_index)
        distance_travelled = distance_travelled - d_rs[min_index]
        distance.append(distance_travelled)
        while distance_travelled <= 20:
            next_route = []
            for i in range(len(pd_mat)):
                if i not in route:
                    next_route.append(pd_mat[i][min_index] + pd_mat[i][i] + d_rs[i])
                else:
                    next_route.append(10**10)
            min_next_route_index = next_route.index(min(next_route))
            # introduced one -d_rs[] here
            distance_travelled = distance_travelled + (next_route[min_next_route_index] - d_rs[min_next_route_index])
            if distance_travelled <= 20:
                route.append(min_next_route_index)
                sub_path.append(min_next_route_index)
                path.append(sub_path)
            else:
                path.append(sub_path)
                #print("Max distance exceeded")
path_final = []
for i in path:
    if i not in path_final:
        path_final.append(i)
if len(path_final[-1]) == 1:
    final_distance = final_distance + starting_point_elements[path_final[-1][0]]
#print(path_final, final_distance)
print("-------- Final Result ---------")
new_list = ""
for i in path_final:
    new_list = new_list + "RS - "
    for j in i:
        new_list = new_list + str(j+1) + " - "
new_list = new_list + "RS"
print("Path = ", new_list)
dist, temp = 0, 0
dist_mat = []
for i in range(len(path_final)):
    first_element, second_element, temp = 0, 0, 0
    for j in range(len(path_final[i])):
        if len(path_final[i]) == 1:
            dist = pp_rs[path_final[i][j]] + pd_mat[path_final[i][j]][path_final[i][j]] + d_rs[path_final[i][j]]
            temp = 1
            break
        if j == 0 and temp == 0:
            dist = pp_rs[path_final[i][j]] + pd_mat[path_final[i][j]][path_final[i][j]]
        else:
            first_element = path_final[i][0]
            second_element = path_final[i][j]
            dist = dist + pd_mat[second_element][second_element - 1] + pd_mat[second_element][second_element]
    if temp == 0:
        dist = dist + d_rs[second_element]
    else:
        dist = dist

    dist_mat.append(dist)

print("Total distance travelled = ", sum(dist_mat))
end_time = time.time()
print("--- %.10f seconds ---" % (end_time - start_time))